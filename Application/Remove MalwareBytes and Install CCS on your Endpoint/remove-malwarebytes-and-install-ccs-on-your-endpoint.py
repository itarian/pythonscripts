#To define a particular parameter, replace the 'parameterName' inside itsm.getParameter('variableName') with that parameter's name
#########################Configuration#Section##########################################################################
# Do you want to download the package from COMODO servers?
comodoservers = "yes"
# if comodo = "yes" the package will be downloaded from:
# https://download.comodo.com/itsm/CIS_x64.msi
# https://download.comodo.com/itsm/CIS_x86.msi
# if comodo = "no" please provide the shared folder path and the .msi names:
SharedFolderPath = r'path'
CISx64Name = r'fileName'
CISx86Name = r'fileName'
# Please choose what to be installed before the profile is applied.
# You can use "yes" or "no"
Containment = "yes"
Antivirus = "yes"
Firewall = "yes"
# If Antivirus = "yes" do you want to download the initial Database from a shared folder ?
# ( Database is automatically updated from Comodo servers after 1 hour as default or after a reboot )
Database = "no"
# If Database = "yes" you can download the latest database from this link and place it on shared folder:
# https://www.comodo.com/home/internet-security/updates/vdp/database.php
SharedFolderPathCAV = r'path'
# FileNameCAV = r'xxxx.cav'
FileNameCAV = r'fileName'
# After CCS is installed do you want to supress the reboot on the endpoint?
SuppressReboot = "yes"
# If reboot = "no" by default you have 5 minutes with a comment "Your device will reboot in 5 minutes because it's required by your administrator"
reboottime = "300"
# Do you want to show installation notes?
notes = "yes"
# Do you want to enable MSI Installation log?
msiLogs = "yes"
########################################################################################################################


import os
import platform
import _winreg


def gid(x):
    find=x
    winreg = _winreg
    REG_PATH1 = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
    REG_PATH2 = r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    registry_key = winreg.OpenKey( winreg.HKEY_LOCAL_MACHINE, REG_PATH1, 0, winreg.KEY_READ)
    winreg.CloseKey(registry_key)
    name = []
    string=[]
    try:
        registry_key = winreg.OpenKey( winreg.HKEY_LOCAL_MACHINE, REG_PATH1, 0, winreg.KEY_READ)
        i=0

        while True:
            try:
                sub_registry_key = winreg.EnumKey(registry_key, i)
                newpath1 = REG_PATH1 + '\\' + sub_registry_key
                new_registry_key = winreg.OpenKey( winreg.HKEY_LOCAL_MACHINE, newpath1, 0, winreg.KEY_READ)
                try:
                    DisplayName, getname = winreg.QueryValueEx(new_registry_key, 'DisplayName')
                    UninstallString, getname = winreg.QueryValueEx(new_registry_key, 'UninstallString')
                    winreg.CloseKey(new_registry_key)
                    name.append(DisplayName)
                    string.append( UninstallString )
                except:
                    pass
                i += 1
            except:
                break
    except:
        pass
    try:
        registry_key1 = winreg.OpenKey( winreg.HKEY_LOCAL_MACHINE, REG_PATH2, 0, winreg.KEY_READ)
        ii=0
        while True:
            try:
                sub_registry_key1 = winreg.EnumKey(registry_key1, ii)
                newpath2 = REG_PATH2 + '\\' + sub_registry_key1
                new_registry_key1 = winreg.OpenKey( winreg.HKEY_LOCAL_MACHINE, newpath2, 0, winreg.KEY_READ)
                try:
                    DisplayName1, getname = winreg.QueryValueEx(new_registry_key1, 'DisplayName')
                    DisplayVersion1, getname = winreg.QueryValueEx(new_registry_key1, 'DisplayVersion')
                    UninstallString1, getname = winreg.QueryValueEx(new_registry_key1, 'UninstallString')
                    winreg.CloseKey(new_registry_key1)
                    name.append(DisplayName1)
                    string.append(UninstallString1 )
                except:
                    pass
                ii += 1
            except:
                break
    except:
        pass
    try:
        registry_key2 = winreg.OpenKey( winreg.HKEY_CURRENT_USER, REG_PATH1, 0, winreg.KEY_READ)
        iii=0
        while True:
            try:
                sub_registry_key2 = winreg.EnumKey(registry_key2, iii)
                newpath3 = REG_PATH1 + '\\' + sub_registry_key2
                new_registry_key2 = winreg.OpenKey( winreg.HKEY_CURRENT_USER, newpath3, 0, winreg.KEY_READ)
                try:
                    DisplayName2, getname = winreg.QueryValueEx(new_registry_key2, 'DisplayName')
                    UninstallString2, getname = winreg.QueryValueEx(new_registry_key2, 'UninstallString')
                    winreg.CloseKey(new_registry_key2)
                    name.append( DisplayName2)
                    string.append(UninstallString2 )
                except:
                    pass
                iii += 1
            except:
                break
    except:
        pass
    try:
        registry_key3 = winreg.OpenKey( winreg.HKEY_CURRENT_USER, REG_PATH2, 0, winreg.KEY_READ)
        iiii=0
        while True:
            try:
                sub_registry_key3 = winreg.EnumKey(registry_key3, iiii)
                newpath4 = REG_PATH2 + '\\' + sub_registry_key3
                new_registry_key3 = winreg.OpenKey( winreg.HKEY_CURRENT_USER, newpath4, 0, winreg.KEY_READ)
                try:
                    DisplayName3, getname = winreg.QueryValueEx(new_registry_key3, 'DisplayName')
                    UninstallString3, getname = winreg.QueryValueEx(new_registry_key3, 'UninstallString')
                    winreg.CloseKey(new_registry_key3)
                    name.append( DisplayName3 )
                    string.append(UninstallString3 )
                except:
                    pass
                iiii += 1
            except:
                break
    except:
        pass
    out={}
    for i in name:
        if find.lower() in i.lower():
            x=i
    for k,v in zip(name,string):
        out[k] = v
    x1=out[x]
    
    if x1:
        cmd=x1+' /quiet REBOOT=ReallySuppress REMOVE=ALL'
        os.popen(cmd).read()

def uni():
    arch=platform.machine()
    if 'AMD64' in arch:
        if os.path.exists(os.environ['PROGRAMFILES(X86)']):
            if os.path.exists(os.path.join(os.environ['PROGRAMFILES(X86)'],"Malwarebytes' Anti-Malware")):
                os.chdir(os.path.join(os.environ['PROGRAMFILES(X86)'],"Malwarebytes' Anti-Malware"))
                print "\n\t*)Malwarebytes Anti-Malware  Uninstallation started......"                
                out=os.popen("unins000.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART").read()
                print(out)
            if os.path.exists(os.path.join(os.environ['PROGRAMFILES(X86)'],"Malwarebytes Anti-Malware")):
                os.chdir(os.path.join(os.environ['PROGRAMFILES(X86)'],"Malwarebytes Anti-Malware"))
                print "\n\t*)Malwarebytes Anti-Malware  Uninstallation started......"                
                out=os.popen("unins000.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART").read()
                print(out)
                
    else:
        if os.path.exists(os.environ['PROGRAMFILES']):
            if os.path.exists(os.path.join(os.environ['PROGRAMFILES'],"Malwarebytes' Anti-Malware")):
                print "\n\t*)Malwarebytes  Anti-Malware  Uninstallation started......"                
                os.chdir(os.path.join(os.environ['PROGRAMFILES'],"Malwarebytes' Anti-Malware"))
                out=os.popen("unins000.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART").read()
                print(out)
                
            if os.path.exists(os.path.join(os.environ['PROGRAMFILES'],"Malwarebytes Anti-Malware")):
                os.chdir(os.path.join(os.environ['PROGRAMFILES'],"Malwarebytes Anti-Malware"))
                print "\n\t*)Malwarebytes Anti-Malware  Uninstallation started......"                
                out=os.popen("unins000.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART").read()
                print(out)

        
        
def uni2():
    arch=platform.machine()
    if 'AMD64' in arch:
        if os.path.exists(os.environ['PROGRAMFILES(X86)']):
            if os.path.exists(os.path.join(os.environ['PROGRAMFILES(X86)'],"Malwarebytes Anti-Exploit")):
                print "\n\t*)Malwarebytes Anti-Exploit  Uninstallation started......"                
                os.chdir(os.path.join(os.environ['PROGRAMFILES(X86)'],"Malwarebytes Anti-Exploit"))
                out=os.popen("unins000.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART").read()
                print(out)
                
                
    else:
        if os.path.exists(os.environ['PROGRAMFILES']):
            if os.path.exists(os.path.join(os.environ['PROGRAMFILES'],"Malwarebytes Anti-Exploit")):
                os.chdir(os.path.join(os.environ['PROGRAMFILES'],"Malwarebytes Anti-Exploit"))
                print "\n\t*)Malwarebytes Anti-Exploit  Uninstallation started......"
                out=os.popen("unins000.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART").read()
                print(out)

def uni3():
    if os.path.exists(os.environ['PROGRAMFILES']):
        if os.path.exists('C:\Program Files\Malwarebytes\Anti-Malware'):
                os.chdir('C:\Program Files\Malwarebytes\Anti-Malware')
                print "\n\t*)Malwarebytes Uninstallation started......"  
                out=os.popen("unins000.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART").read()
                print(out)
        else:
            print "\n\t*)Malwarebytes path not found..."

def uni4():
    import os
    import _winreg
    import re
    def check():
        inst=os.popen("wmic product get name,identifyingnumber").read()      
        return inst
    def reg():
        blacklist=r"Malwarebytes' Managed Client"
        def collectprograms(rtkey,pK,kA):
            try:
                list=[]
                oK=_winreg.OpenKey(rtkey,pK,0,kA)
                i=0
                while True:
                    try:
                        bkey=_winreg.EnumKey(oK,i)
                        vkey=os.path.join(pK,bkey)
                        oK1=_winreg.OpenKey(rtkey,vkey,0,kA)
                        try:
                            DN,bla=_winreg.QueryValueEx(oK1,'DisplayName')
                            inlist=[DN.strip(), vkey, pK]
                            list.append(inlist)
                            
                        except:
                            pass
                        i+=1
                    except:
                        break
            except:
                pass
            return list            
        uninstallkey_32='SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall'
        if 'PROGRAMFILES(X86)' in os.environ.keys():
            
            rklist=[(_winreg.HKEY_LOCAL_MACHINE,uninstallkey_32,_winreg.KEY_WOW64_32KEY | _winreg.KEY_READ),
                    (_winreg.HKEY_LOCAL_MACHINE,uninstallkey_32,_winreg.KEY_WOW64_64KEY | _winreg.KEY_READ),
                    (_winreg.HKEY_CURRENT_USER,uninstallkey_32,_winreg.KEY_WOW64_32KEY | _winreg.KEY_READ),
                    (_winreg.HKEY_CURRENT_USER,uninstallkey_32,_winreg.KEY_WOW64_64KEY | _winreg.KEY_READ)]
        else:
            
            rklist=[(_winreg.HKEY_LOCAL_MACHINE,uninstallkey_32,_winreg.KEY_READ),
                    (_winreg.HKEY_CURRENT_USER,uninstallkey_32,_winreg.KEY_READ)]

        bet=[]
        for i in rklist:
            col=collectprograms(i[0], i[1], i[2])
            for c in col:
                print c
                if blacklist in c:
                    bet.append(c[1])
        if not bet:
            print "Please Mention the valid blacklist Installed Software"
        else:
            for i in bet:
                print i
                j=i.replace(" ", '" "')
                v='\\'
                path="HKEY_LOCAL_MACHINE"+v+i
                path1="HKEY_LOCAL_MACHINE"+v+j
                got=path1
        return got
    inst=check()
    if len(inst)>0:
        find=re.findall("{.*}\s\sMalwarebytes'\sManaged\\sClient",inst)
        if len(find)>0:
            final=re.findall('{.*}',find[0])[0]            
            if len(final) == 38:
                print "\n\t*)Malwarebytes' Managed Client Uninstallation started......"  
                cmd='msiexec.exe /x %s /quiet REBOOT=ReallySuppress REMOVE=ALL'%final
                os.popen(cmd).read()
            else:
                fin=reg()
                fina=fin.split('\\')[-1]
                final1=re.findall('{.*}',fina)[0]
                print "\n\t*)Malwarebytes' Managed Client Uninstallation started......"  
                cmd='msiexec.exe /x %s /quiet REBOOT=ReallySuppress REMOVE=ALL'%final1
                os.popen(cmd).read()
                        
            
def checkapp(AppName):
    import _winreg
    import os
    AppName = AppName.lower()
    def DNDS(rtkey, pK, kA):
        ln = []
        lv = []
        try:
            oK = _winreg.OpenKey(rtkey, pK, 0, kA)
            i = 0
            while True:
                try:
                    bkey = _winreg.EnumKey(oK, i)
                    vkey = os.path.join(pK, bkey)
                    oK1 = _winreg.OpenKey(rtkey, vkey, 0, kA)
                    try:
                        tls = []
                        DN, bla = _winreg.QueryValueEx(oK1, 'DisplayName')
                        DV, bla = _winreg.QueryValueEx(oK1, 'DisplayVersion')
                        _winreg.CloseKey(oK1)
                        ln.append(DN)
                        lv.append(DV)
                    except:
                        pass
                    i += 1
                except:
                    break
            _winreg.CloseKey(oK)
            return zip(ln, lv)
        except:
            return zip(ln, lv)

    rK = _winreg.HKEY_LOCAL_MACHINE
    sK = r'SYSTEM\CurrentControlSet\Control\Session Manager\Environment'
    openedKey = _winreg.OpenKey(rK, sK, 0, _winreg.KEY_READ)
    arch, bla = _winreg.QueryValueEx(openedKey, 'PROCESSOR_ARCHITECTURE')
    arch = str(arch)
    _winreg.CloseKey(openedKey)

    if arch == 'AMD64':
        fList = DNDS(_winreg.HKEY_LOCAL_MACHINE, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall', _winreg.KEY_WOW64_32KEY | _winreg.KEY_READ)
        fList.extend(DNDS(_winreg.HKEY_LOCAL_MACHINE, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall', _winreg.KEY_WOW64_64KEY | _winreg.KEY_READ))
        fList.extend(DNDS(_winreg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall', _winreg.KEY_WOW64_32KEY | _winreg.KEY_READ))
        fList.extend(DNDS(_winreg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall', _winreg.KEY_WOW64_64KEY | _winreg.KEY_READ))
    else:
        fList = DNDS(_winreg.HKEY_LOCAL_MACHINE, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall', _winreg.KEY_READ)
        fList.extend(DNDS(_winreg.HKEY_CURRENT_USER, r'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall', _winreg.KEY_READ))
    fList = set(fList)

    lr = []
    rs = 0
    for i in fList:
        a, b = i
        if AppName in a.lower():
            lr.append('success: {} is installed'.format(a))
            lr.append('{:<25}{:5}'.format(a, b))
            rs += 1
        else:
            rs += 0
    if rs:
        return True
    return False


def installccs():
    import os
    from subprocess import PIPE, Popen
    import shutil
    import ctypes
    import re
    import datetime

    try:
        import winreg as _winreg
    except ImportError:
        try:
            import _winreg
        except ImportError:
            pass
    import ssl
    import time

    try:
        import urllib.request as urllib2
    except ImportError:
        try:
            import urllib2
        except ImportError:
            pass

    msiLogSwitch = ""

    if msiLogs is "yes":
        OsPath = r"C:\Program Files (x86)"
        if os.path.exists(OsPath):
            msiLogSwitch = r' /lv*x "C:\Program Files (x86)\COMODO\Comodo ITSM\rmmlogs\CES_Install_MSI ' + str(
                datetime.datetime.now().strftime("%d-%m-%y %H-%M-%S")) + '.log"'
        else:
            msiLogSwitch = r' /lv*x "C:\Program Files\COMODO\Comodo ITSM\rmmlogs\CES_Install_MSI ' + str(
                datetime.datetime.now().strftime("%d-%m-%y %H-%M-%S")) + '.log"'

    t1 = int(reboottime) / 60
    rebootcomment = "Your device will reboot in " + str(t1) + " minutes because it's required by your administrator"


    class disable_file_system_redirection:
        _disable = ctypes.windll.kernel32.Wow64DisableWow64FsRedirection
        _revert = ctypes.windll.kernel32.Wow64RevertWow64FsRedirection

        def __enter__(self):
            self.old_value = ctypes.c_long()
            self.success = self._disable(ctypes.byref(self.old_value))

        def __exit__(self, type, value, traceback):
            if self.success:
                self._revert(self.old_value)


    def check():
        with disable_file_system_redirection():
            inst = os.popen("wmic product get name,identifyingnumber").read()
        return inst


    def ecmd(command, output=False):

        with disable_file_system_redirection():
            objt = Popen(command, shell=True, stdout=PIPE, stderr=PIPE)
            out, err = objt.communicate()
            ret = objt.returncode
        if not out:
            return ret
        else:
            return '%s\n%s' % (out, err)


    def Download1(Download_URL, Download_Path):
        print('\nDownloading required Comodo Client Security installation files')
        fileName = Download_URL.split('/')[-1]
        DownTo = os.path.join(Download_Path, fileName)
        try:
            context = ssl._create_unverified_context()
            f = urllib2.urlopen(Download_URL, context=context)
        except:
            f = urllib2.urlopen(Download_URL)
        data = f.read()
        with open(DownTo, "wb") as code:
            code.write(data)
        time.sleep(300)
        print('\nComodo Client security has been successfully downloaded here ' + DownTo)
        return DownTo


    find = re.findall('{.*}\s\sCOMODO\sClient\s-\sSecurity', check())
    # Check if CCS is installed on the end point
    if len(find) == 0:
        print("Comodo Client Security is not installed on the End point")
        # Checks type of the system
        OsPath = r"C:\Program Files (x86)"
        # If system is 64 bit
        if os.path.exists(OsPath):
            print("System type 64 bit")
            # Download and install CCS from the link
            if comodoservers is "yes":
                print("Installation files will be downloaded from Comodo Servers")
                Download_URL = "https://download.comodo.com/itsm/CIS_x64.msi"
                Download_Path = os.environ['PROGRAMDATA']
                path = Download1(Download_URL, Download_Path)
                c = "0"
                a = "0"
                f = "0"
                if Containment is "yes":
                    print("Containment component will be installed")
                    c = "1"
                else:
                    print("Containment component will not be installed")
                    c = "0"
                if Antivirus is "yes":
                    print("Antivirus component will be installed")
                    a = "1"
                else:
                    print("Antivirus component will not be installed")
                    a = "0"
                if Firewall is "yes":
                    print("Firewall component will be installed")
                    f = "1"
                else:
                    print("Firewall component will not be installed")
                    f = "0"
                if notes is "yes":
                    print(ecmd(
                        r'msg * /time:30 Comodo Client - Security installation has started. Do not restart PC until next announcement.',
                        True))
                command1 = 'msiexec /i  "' + path + '"  /quiet REBOOT=ReallySuppress CESMCONTEXT=1 MAKE_CESM_DEFAULT_CONFIG=1 CES_SANDBOX=' + c + ' CES_FIREWALL=' + f + ' CES_ANTIVIRUS=' + a + ' INSTALLFIREWALL=' + f + msiLogSwitch
                if ecmd(command1, True) == 3010:
                    ecmd('"C:\Program Files\COMODO\Comodo ITSM\ITSMService.exe" -c 4',True)
                    pass
                else:
                    raise Exception("Failed to install CCS. Please check MSI logs for details:%s" % str(msiLogSwitch)[7:])
                print("Please wait until CCS will be installed")
                time.sleep(300)
                os.remove(path)
                print('Comodo Client Security was successfully installed')
                print("Installation files have been successfully removed")
                if Antivirus is "yes":
                    print("Antivirus component was installed")
                    if Database is "no":
                        print("Database will be updated accordingly to the schedule")
                        if SuppressReboot is "yes":
                            print("Reboot of the system was suppressed")
                            if notes is "yes":
                                print(ecmd(
                                    r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                    True))
                        else:
                            print("Reboot of the system wasn't suppressed")
                            print('System will restart in ' + str(t1) + ' minutes')
                            print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                    else:
                        print("Database will be imported from the shared folder")
                        if len(re.findall('{.*}\s\sCOMODO\sClient\s-\sSecurity', check())) != 0:
                            print("COMODO Client Security is installed on the PC")
                            print("Antivirus signature database out of date")
                            Source_Path = SharedFolderPathCAV
                            EnvTemp = os.environ['PROGRAMDATA']
                            Dest_Path = os.path.join(EnvTemp, r'Comodo')
                            File_Name_CAV = FileNameCAV
                            SP_CAV = os.path.join(Source_Path, File_Name_CAV)
                            DP_CAV = os.path.join(Dest_Path, File_Name_CAV)
                            if os.path.exists(SP_CAV):
                                print("Database source path exists")
                            if not os.path.exists(Dest_Path):
                                os.makedirs(Dest_Path)
                                print("Destination path was created")
                            if os.path.isdir(Dest_Path):
                                print('"' + Dest_Path + '"' + " folder exists")
                            else:
                                print('"' + Dest_Path + '"' + " folder do NOT exists")
                            try:
                                os.remove(DP_CAV)
                            except OSError:
                                pass
                            shutil.copy(SP_CAV, DP_CAV)
                            if os.path.getsize(SP_CAV) == os.path.getsize(DP_CAV):
                                print("Database files were copied successfully")
                            else:
                                print("Database files weren't copied")
                            time.sleep(300)
                            command1 = '"C:\Program Files\COMODO\COMODO Internet Security\cfpconfg.exe" --importAVDB "' + DP_CAV + '"'
                            print(ecmd(command1, True))
                            print('Antivirus signature database was updated Successfully')
                            print("ITSM agent is trying to connect to the CCS")
                            time.sleep(300)
                            if SuppressReboot is "yes":
                                print("Reboot of the system was suppressed")
                                if notes is "yes":
                                    print(ecmd(
                                        r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                        True))
                            else:
                                print("Reboot of the system wasn't suppressed")
                                print('System will restart in ' + str(t1) + ' minutes')
                                print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                        else:
                            print("COMODO Client Security is NOT present")
                            print("Endpoint will NOT reboot, regardless of the SuppressReboot settings")
                else:
                    if SuppressReboot is "yes":
                        print("Reboot of the system was suppressed")
                        if notes is "yes":
                            print(ecmd(
                                r'msg * /time:30 Comodo Client Security installation is finished. You may restart PC to complete installation.',
                                True))
                    else:
                        print("Reboot of the system was NOT suppressed")
                        print('System will restart in ' + str(t1) + ' minutes')
                        print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
            # CCS will be installed from the shared folder
            else:
                print("Installation files will be copied from shared folder")
                Source_Path = SharedFolderPath
                EnvTemp = os.environ['ProgramData']
                Dest_Path = os.path.join(EnvTemp, r'Comodo')
                SP_64 = os.path.join(Source_Path, CISx64Name)
                DP_64 = os.path.join(Dest_Path, CISx64Name)
                if not os.path.exists(Dest_Path):
                    os.makedirs(Dest_Path)
                    print("Destination path was created")
                if os.path.isdir(Dest_Path):
                    print('"' + Dest_Path + '"' + " folder exists")
                else:
                    print('"' + Dest_Path + '"' + " folder do NOT exists")
                try:
                    os.remove(DP_64)
                except OSError:
                    pass
                shutil.copy(SP_64, DP_64)
                if os.path.getsize(SP_64) == os.path.getsize(DP_64):
                    print("Installation files were copied successfully")
                else:
                    print("Installation files weren't copied")
                    exit(code=1)
                time.sleep(300)
                if os.path.getsize(SP_64) == os.path.getsize(DP_64):
                    print("Database files were copied successfully")
                else:
                    print("Database files weren't copied")
                time.sleep(300)
                c = "0"
                a = "0"
                f = "0"
                if Containment is "yes":
                    print("Containment component will be installed")
                    c = "1"
                else:
                    print("Containment component will not be installed")
                    c = "0"
                if Antivirus is "yes":
                    print("Antivirus component will be installed")
                    a = "1"
                else:
                    print("Antivirus component will not be installed")
                    a = "0"
                if Firewall is "yes":
                    print("Firewall component will be installed")
                    f = "1"
                else:
                    print("Firewall component will not be installed")
                    f = "0"
                if notes is "yes":
                    print(ecmd(r'msg * /time:30 CCS installation is started. Do not restart PC until next anouncement.',
                               True))
                command1 = 'msiexec /i  "' + DP_64 + '"  /quiet REBOOT=ReallySuppress CESMCONTEXT=1 MAKE_CESM_DEFAULT_CONFIG=1 CES_SANDBOX=' + c + ' CES_FIREWALL=' + f + ' CES_ANTIVIRUS=' + a + ' INSTALLFIREWALL=' + f + msiLogSwitch
                if ecmd(command1, True) == 3010:
                    ecmd('"C:\Program Files\COMODO\Comodo ITSM\ITSMService.exe" -c 4',True)
                    pass
                else:
                    raise Exception("Failed to install CCS. Please check MSI logs for details:%s" % str(msiLogSwitch)[7:])
                print("Please wait until CCS will be installed")
                time.sleep(300)
                os.remove(DP_64)
                print('Comodo Client Security was successfully installed')
                print("Installation files have been successfully removed")
                if Antivirus is "yes":
                    print("Antivirus component was installed")
                    if Database is "no":
                        print("Database will be updated accordingly to the schedule")
                        if SuppressReboot is "yes":
                            print("Reboot of the system was suppressed")
                            if notes is "yes":
                                print(ecmd(
                                    r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                    True))
                        else:
                            print("Reboot of the system wasn't suppressed")
                            print('System will restart in ' + str(t1) + ' minutes')
                            print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                    else:
                        print("Database will be imported from the shared folder")

                        if len(re.findall('{.*}\s\sCOMODO\sClient\s-\sSecurity', check())) != 0:
                            print("COMODO Client Security is installed on the PC")
                            print("Antivirus signature database out of date")
                            Source_Path = SharedFolderPathCAV
                            EnvTemp = os.environ['PROGRAMDATA']
                            Dest_Path = os.path.join(EnvTemp, r'Comodo')
                            File_Name_CAV = FileNameCAV
                            SP_CAV = os.path.join(Source_Path, File_Name_CAV)
                            DP_CAV = os.path.join(Dest_Path, File_Name_CAV)
                            if os.path.exists(SP_CAV):
                                print("Database path exists")
                            if not os.path.exists(Dest_Path):
                                os.makedirs(Dest_Path)
                                print("Destination folder was created")
                            if os.path.isdir(Dest_Path):
                                print('"' + Dest_Path + '"' + " folder exists")
                            else:
                                print('"' + Dest_Path + '"' + " folder do NOT exists")
                            try:
                                os.remove(DP_CAV)
                            except OSError:
                                pass
                            if os.path.getsize(SP_CAV) == os.path.getsize(DP_CAV):
                                print("Database files were copied successfully")
                            else:
                                print("Database files weren't copied")
                                exit(code = 1)
                            command1 = '"C:\Program Files\COMODO\COMODO Internet Security\cfpconfg.exe" --importAVDB "' + DP_CAV + '"'
                            print(ecmd(command1, True))
                            print('Antivirus signature database was updated Successfully')
                            print("ITSM agent is trying to connect to the CCS")
                            time.sleep(300)
                            if SuppressReboot is "yes":
                                print("Reboot of the system was suppressed")
                                if notes is "yes":
                                    print(ecmd(
                                        r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                        True))
                            else:
                                print("Reboot of the system wasn't suppressed")
                                print('System will restart in ' + str(t1) + ' minutes')
                                print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                        else:
                            print("COMODO Client Security is NOT present")
                            print("Endpoint will NOT reboot, regardless of the SuppressReboot settings")
                else:
                    if SuppressReboot is "yes":
                        print("Reboot of the system was suppressed")
                        if notes is "yes":
                            print(ecmd(
                                r'msg * /time:30 Comodo Client Security installation is finished. You may restart PC to complete installation.',
                                True))
                    else:
                        print("Reboot of the system was NOT suppressed")
                        print('System will restart in ' + str(t1) + ' minutes')
                        print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
        else:
            # If system is 32 bit
        
            print("System type 32 bit")
            # Download and install CCS from the link
            if comodoservers is "yes":
                print("Installation files will be downloaded from Comodo Servers")
                Download_URL = "https://download.comodo.com/itsm/CIS_x86.msi"
                Download_Path = os.environ['PROGRAMDATA']
                path = Download1(Download_URL, Download_Path)
                c = "0"
                a = "0"
                f = "0"
                if Containment is "yes":
                    print("Containment component will be installed")
                    c = "1"
                else:
                    print("Containment component will not be installed")
                    c = "0"
                if Antivirus is "yes":
                    print("Antivirus component will be installed")
                    a = "1"
                else:
                    print("Antivirus component will not be installed")
                    a = "0"
                if Firewall is "yes":
                    print("Firewall component will be installed")
                    f = "1"
                else:
                    print("Firewall component will not be installed")
                    f = "0"
                if notes is "yes":
                    print(ecmd(
                        r'msg * /time:30 Comodo Client - Security installation has started. Do not restart PC until next announcement.',
                        True))
                command1 = 'msiexec /i  "' + path + '"  /quiet REBOOT=ReallySuppress CESMCONTEXT=1 MAKE_CESM_DEFAULT_CONFIG=1 CES_SANDBOX=' + c + ' CES_FIREWALL=' + f + ' CES_ANTIVIRUS=' + a + ' INSTALLFIREWALL=' + f + msiLogSwitch
                if ecmd(command1, True) == 3010:
                    ecmd('"C:\Program Files\COMODO\Comodo ITSM\ITSMService.exe" -c 4',True)
                    pass
                else:
                    raise Exception(
                        "Failed to install CCS. Please check MSI logs for details:%s" % str(msiLogSwitch)[7:])
                print("Please wait until CCS will be installed")
                time.sleep(300)
                os.remove(path)
                print('Comodo Client Security was successfully installed')
                print("Installation files have been successfully removed")
                if Antivirus is "yes":
                    print("Antivirus component was installed")
                    if Database is "no":
                        print("Database will be updated accordingly to the schedule")
                        if SuppressReboot is "yes":
                            print("Reboot of the system was suppressed")
                            if notes is "yes":
                                print(ecmd(
                                    r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                    True))
                        else:
                            print("Reboot of the system wasn't suppressed")
                            print('System will restart in ' + str(t1) + ' minutes')
                            print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                    else:
                        print("Database will be imported from the shared folder")
                        if len(re.findall('{.*}\s\sCOMODO\sClient\s-\sSecurity', check())) != 0:
                            print("COMODO Client Security is installed on the PC")
                            print("Antivirus signature database out of date")
                            Source_Path = SharedFolderPathCAV
                            EnvTemp = os.environ['PROGRAMDATA']
                            Dest_Path = os.path.join(EnvTemp, r'Comodo')
                            File_Name_CAV = FileNameCAV
                            SP_CAV = os.path.join(Source_Path, File_Name_CAV)
                            DP_CAV = os.path.join(Dest_Path, File_Name_CAV)
                            if os.path.exists(SP_CAV):
                                print("Database source path exists")
                            if not os.path.exists(Dest_Path):
                                os.makedirs(Dest_Path)
                                print("Destination path was created")
                            if os.path.isdir(Dest_Path):
                                print('"' + Dest_Path + '"' + " folder exists")
                            else:
                                print('"' + Dest_Path + '"' + " folder do NOT exists")
                            try:
                                os.remove(DP_CAV)
                            except OSError:
                                pass
                            shutil.copy(SP_CAV, DP_CAV)
                            if os.path.getsize(SP_CAV) == os.path.getsize(DP_CAV):
                                print("Database files were copied successfully")
                            else:
                                print("Database files weren't copied")
                            time.sleep(300)
                            command1 = '"C:\Program Files\COMODO\COMODO Internet Security\cfpconfg.exe" --importAVDB "' + DP_CAV + '"'
                            print(ecmd(command1, True))
                            print('Antivirus signature database was updated Successfully')
                            print("ITSM agent is trying to connect to the CCS")
                            time.sleep(300)
                            if SuppressReboot is "yes":
                                print("Reboot of the system was suppressed")
                                if notes is "yes":
                                    print(ecmd(
                                        r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                        True))
                            else:
                                print("Reboot of the system wasn't suppressed")
                                print('System will restart in ' + str(t1) + ' minutes')
                                print(
                                    ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                        else:
                            print("COMODO Client Security is NOT present")
                            print("Endpoint will NOT reboot, regardless of the SuppressReboot settings")
                else:
                    if SuppressReboot is "yes":
                        print("Reboot of the system was suppressed")
                        if notes is "yes":
                            print(ecmd(
                                r'msg * /time:30 Comodo Client Security installation is finished. You may restart PC to complete installation.',
                                True))
                    else:
                        print("Reboot of the system was NOT suppressed")
                        print('System will restart in ' + str(t1) + ' minutes')
                        print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
            # CCS will be installed from the shared folder
            else:
                print("Installation files will be copied from shared folder")
                Source_Path = SharedFolderPath
                EnvTemp = os.environ['ProgramData']
                Dest_Path = os.path.join(EnvTemp, r'Comodo')
                SP_86 = os.path.join(Source_Path, CISx86Name)
                DP_86 = os.path.join(Dest_Path, CISx86Name)
                if not os.path.exists(Dest_Path):
                    os.makedirs(Dest_Path)
                    print("Destination path was created")
                if os.path.isdir(Dest_Path):
                    print('"' + Dest_Path + '"' + " folder exists")
                else:
                    print('"' + Dest_Path + '"' + " folder do NOT exists")
                try:
                    os.remove(DP_86)
                except OSError:
                    pass
                shutil.copy(SP_86, DP_86)
                if os.path.getsize(SP_86) == os.path.getsize(DP_86):
                    print("Installation files were copied successfully")
                else:
                    print("Installation files weren't copied")
                    exit(code=1)
                time.sleep(300)
                c = "0"
                a = "0"
                f = "0"
                if Containment is "yes":
                    print("Containment component will be installed")
                    c = "1"
                else:
                    print("Containment component will not be installed")
                    c = "0"
                if Antivirus is "yes":
                    print("Antivirus component will be installed")
                    a = "1"
                else:
                    print("Antivirus component will not be installed")
                    a = "0"
                if Firewall is "yes":
                    print("Firewall component will be installed")
                    f = "1"
                else:
                    print("Firewall component will not be installed")
                    f = "0"
                if notes is "yes":
                    print(ecmd(r'msg * /time:30 CCS installation is started. Do not restart PC until next anouncement.',
                               True))
                command1 = 'msiexec /i  "' + DP_86 + '"  /quiet REBOOT=ReallySuppress CESMCONTEXT=1 MAKE_CESM_DEFAULT_CONFIG=1 CES_SANDBOX=' + c + ' CES_FIREWALL=' + f + ' CES_ANTIVIRUS=' + a + ' INSTALLFIREWALL=' + f + msiLogSwitch
                if ecmd(command1, True) == 3010:
                    ecmd('"C:\Program Files\COMODO\Comodo ITSM\ITSMService.exe" -c 4',True)
                    pass
                else:
                    raise Exception(
                        "Failed to install CCS. Please check MSI logs for details:%s" % str(msiLogSwitch)[7:])
                print("Please wait until CCS will be installed")
                time.sleep(300)
                os.remove(DP_86)
                print('Comodo Client Security was successfully installed')
                print("Installation files have been successfully removed")
                if Antivirus is "yes":
                    print("Antivirus component was installed")
                    if Database is "no":
                        print("Database will be updated accordingly to the schedule")
                        if SuppressReboot is "yes":
                            print("Reboot of the system was suppressed")
                            if notes is "yes":
                                print(ecmd(
                                    r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                    True))
                        else:
                            print("Reboot of the system wasn't suppressed")
                            print('System will restart in ' + str(t1) + ' minutes')
                            print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                    else:
                        print("Database will be imported from the shared folder")

                        if len(re.findall('{.*}\s\sCOMODO\sClient\s-\sSecurity', check())) != 0:
                            print("COMODO Client Security is installed on the PC")
                            print("Antivirus signature database out of date")
                            Source_Path = SharedFolderPathCAV
                            EnvTemp = os.environ['PROGRAMDATA']
                            Dest_Path = os.path.join(EnvTemp, r'Comodo')
                            File_Name_CAV = FileNameCAV
                            SP_CAV = os.path.join(Source_Path, File_Name_CAV)
                            DP_CAV = os.path.join(Dest_Path, File_Name_CAV)
                            if os.path.exists(SP_CAV):
                                print("Database path exists")
                            if not os.path.exists(Dest_Path):
                                os.makedirs(Dest_Path)
                                print("Destination folder was created")
                            if os.path.isdir(Dest_Path):
                                print('"' + Dest_Path + '"' + " folder exists")
                            else:
                                print('"' + Dest_Path + '"' + " folder do NOT exists")
                            try:
                                os.remove(DP_CAV)
                            except OSError:
                                pass
                            shutil.copy(SP_CAV, DP_CAV)
                            if os.path.getsize(SP_CAV) == os.path.getsize(DP_CAV):
                                print("Database files were copied successfully")
                            else:
                                print("Database files weren't copied")
                            command1 = '"C:\Program Files\COMODO\COMODO Internet Security\cfpconfg.exe" --importAVDB "' + DP_CAV + '"'
                            print(ecmd(command1, True))
                            print('Antivirus signature database was updated Successfully')
                            print("ITSM agent is trying to connect to the CCS")
                            time.sleep(300)
                            if SuppressReboot is "yes":
                                print("Reboot of the system was suppressed")
                                if notes is "yes":
                                    print(ecmd(
                                        r'msg * /time:30 CCS installation is finished. You may restart PC to complete installation.',
                                        True))
                            else:
                                print("Reboot of the system wasn't suppressed")
                                print('System will restart in ' + str(t1) + ' minutes')
                                print(
                                    ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))
                        else:
                            print("COMODO Client Security is NOT present")
                            print("Endpoint will NOT reboot, regardless of the SuppressReboot settings")
                else:
                    if SuppressReboot is "yes":
                        print("Reboot of the system was suppressed")
                        if notes is "yes":
                            print(ecmd(
                                r'msg * /time:30 Comodo Client Security installation is finished. You may restart PC to complete installation.',
                                True))
                    else:
                        print("Reboot of the system was NOT suppressed")
                        print('System will restart in ' + str(t1) + ' minutes')
                        print(ecmd(r'shutdown.exe -r -t ' + reboottime + ' /f /c "' + rebootcomment + '"', True))



    else:
        print("Comodo Client Security is installed on the end point")

def recheck():
    app3=checkapp('Malwarebytes Anti-Malware')
    app8=checkapp('Malwarebytes Anti-Malware')
    if app3:
        print '\n\t\t*)Try again with Uninstall String'
        gid('Malwarebytes Anti-Malware')
        if app8:
            print "\n\t\t*)Malwarebytes Anti-Malware  Uninstalled Failed...."
            return '0'
        else:
            print "\n\t\t*)Malwarebytes Anti-Malware  Uninstalled Successfully...."
            return '1'
    else:
        print "\n\t*)Malwarebytes Anti-Malware  Uninstalled Successfully...."
        return '1'
def recheck1():
    app4=checkapp('Malwarebytes Anti-Exploit')
    app9=checkapp('Malwarebytes Anti-Malware')
    if app4:
        print '\n\t\t*)Try again with Uninstall String'
        gid('Malwarebytes Anti-Exploit')
        if app9:
            print "\n\t\t*)Malwarebytes Anti-Exploit  Uninstalled Failed...."
            return '0'
        else:
            print "\n\t\t*)Malwarebytes Anti-Exploit  Uninstalled Successfully...."
            return '1'

    else:
        print "\n\t*)Malwarebytes Anti-Exploit  Uninstalled Successfully...."
        return '1'
def recheck2():
    app6=checkapp('Malwarebytes version')
    app10=checkapp('Malwarebytes Anti-Malware')
    if app6:
        print '\n\t\t*)Try again with Uninstall String'
        gid('Malwarebytes version')
        if app10:
            print "\n\t\t*)Malwarebytes Uninstalled Failed...."
            return '0'
        else:
            print "\n\t\t*)Malwarebytes Uninstalled Successfully...."
            return '1'
            
    else:
        print "\n\t*)Malwarebytes Uninstalled Successfully...."
        return '1'

def recheck3():
    app7=checkapp("Malwarebytes' Managed Client")
    app11=checkapp('Malwarebytes Anti-Malware')
    if app7:
        print "\n\t*)Malwarebytes' Managed Client Uninstalled Failed...."        
    else:
        print "\n\t*)Malwarebytes' Managed Client Uninstalled Successfully...."
        return '1'
    

app1=checkapp('Malwarebytes Anti-Malware')
app2=checkapp('Malwarebytes Anti-Exploit')
app5=checkapp('Malwarebytes version')
app7=checkapp("Malwarebytes' Managed Client")

if app1:
    print "Malwarebytes Anti-Malware is Found in the system"
    uni()
    r=recheck()
else:
    print "\nMalwarebytes Anti-Malware is not found in the system"
    r=1
if app2:
    print "\nMalwarebytes Anti-Exploit is Found in the System"
    uni2()
    r1=recheck1()
else:
    print "\nMalwarebytes Anti-Exploit is not found in the system"
    r1=1
if app5:
    print "\nMalwarebytes  is Found in the system"
    uni3()
    r2=recheck2()
else:
    print "\nMalwarebytes is not found in the system"
    r2=1

if app7:
    print "\nMalwarebytes' Managed Client is Found in the system"
    uni4()
    r3=recheck3()
else:
    print "\nMalwarebytes' Managed Client is not found in the system"
    r3=1

    

if r > 0 or r1 > 0 or r2 > 0 or r3 > 0:
    print "\nCCS INSTALLATION STARTED..........\n"
    installccs()
